import json

import streamlit as st
from langchain.schema import messages_from_dict, messages_to_dict

from src.utils import load_file


def save_message(message, role):
    """
    Saves a message and its corresponding role (e.g., "ai") to the session state.
    """
    st.session_state["messages"].append({"message": message, "role": role})


def send_message(message, role, save=True):
    """
    Sends a message to a specific role in a chat and optionally saves the message.

    Args:
        message: The content of the message that you want to send. It can
        be a string or any other data type that can be converted to a string.
        role: The role or identity of the sender of the message. It can be any string value that represents the role, such as "ai", "assistant", etc.
        save: A boolean flag that determines whether or not to save the message. If `save` is set to `True`, the message will be saved using the `save_message` function.
    """
    with st.chat_message(role):
        st.markdown(message)
    if save:
        save_message(message, role)


def display_chat_history():
    """
    Displays the chat messages without saving them.
    """
    for message in st.session_state["messages"]:
        send_message(message["message"], message["role"], save=False)


def save_history(input, output):
    """
    Save the chat history by appending the input and output to the session state.

    Args:
        input: The user's input or message in a chat conversation.
        output: The response or output generated by the chatbot or the
        system based on the given input. It could be a text message,
        a recommendation, a prediction, or any other form of output generated by the system.
    """
    st.session_state["chat_history"].append(
        {"input": input, "output": output},
    )


def save_history_to_file(history_file_path):
    """
    Saves the chat history to a file in JSON format.

    Args:
        history_file_path: The file path where you want to save the chat history. It should be a string representing the file path.
    """
    history = st.session_state["memory"].chat_memory.messages
    history = messages_to_dict(history)

    with open(history_file_path, "w") as fp:
        json.dump(history, fp, indent=2)


def restore_history_from_memory():
    """
    Restores chat history from memory by saving the input and output context.
    """
    for history in st.session_state["chat_history"]:
        st.session_state["memory"].save_context(
            {"input": history["input"]},
            {"output": history["output"]},
        )


@st.cache_data(show_spinner="Loading history from file...")
def load_history_from_file(history_file_path):
    """
    Loads chat history from a file and updates the chat memory.

    Args:
        history_file_path: A string that represents the file path of the history file that you want to load. This file should contain the chat history data in a JSON format.
    """
    loaded_message = load_file(history_file_path)
    history = messages_from_dict(loaded_message)
    st.session_state["memory"].chat_memory.messages = history
